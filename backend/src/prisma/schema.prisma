generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id      Int    @id @default(autoincrement())
  Message String
}

enum Gender {
  M
  F
}

enum SleepQuality {
  Poor
  Fair
  Good
  Excellent
}

enum PhysicalActivityLevel {
  Sedentary 
  LightlyActive @map("Lightly Active")
  ModeratelyActive @map("Moderately Active")
  VeryActive @map("Very Active")
}

model Users {
  id               String             @id @default(uuid())
  displayName      String
  email            String             @unique
  password         String
  allergies        String
  age              Int
  gender           Gender
  targetWeight     Float
  currentWeight    Float
  sleepQuality     SleepQuality
  stressLevel      Int
  physicalActivityLevel PhysicalActivityLevel
  NutritionPlans   NutritionPlans[]
  PantryItems      PantryItems[]
  SavedRecipe      SavedRecipes[]
  FoodLogs         FoodLogs[]
}

model PantryItems {
  id             String   @id @default(uuid())
  userId         String
  itemName       String
  quantity       Int
  expirationDate DateTime @default(now())
  user           Users    @relation(fields: [userId], references: [id])
}

model NutritionPlans {
  id               String             @id @default(uuid())
  userId           String
  caloriesGoal     Float
  startDate        DateTime
  endDate          DateTime
  user             Users              @relation(fields: [userId], references: [id])
}

model SavedRecipes {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  user      Users    @relation(fields: [userId], references: [id])
  recipe    Recipes  @relation(fields: [recipeId], references: [id])
}

model FoodLogs {
  id           String         @id @default(uuid())
  userId       String
  logTitle     String 
  description  String
  totalProtein Float
  totalCarbs   Float
  totalFat     Float
  totalCalories     Float
  baseGOal     Float
  weight       Float
  date         DateTime       @default(now())
  user         Users         @relation(fields: [userId], references: [id])
  FoodLogItems FoodLogItems[] // Add this line
}

model Recipes {
  id           String         @id @default(uuid())
  name         String
  ingredients  String
  instructions String
  calories     Float
  protein      Float
  carbs        Float
  fat          Float
  SavedRecipe  SavedRecipes[]
  FoodLogItems FoodLogItems[] // Add this line
}

enum MealType {
  Breakfast
  Lunch
  Dinner
}

model FoodLogItems {
  id        String    @id @default(uuid())
  foodLogId String    // Foreign key for FoodLogs
  recipeId  String    // Foreign key for Recipes
  type      MealType
  foodLog   FoodLogs  @relation(fields: [foodLogId], references: [id])
  recipe    Recipes   @relation(fields: [recipeId], references: [id])
}


